'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DBxDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DBxDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableTPINSData As TPINSDataDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TPINSData")) Is Nothing) Then
                MyBase.Tables.Add(New TPINSDataDataTable(ds.Tables("TPINSData")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TPINSData() As TPINSDataDataTable
        Get
            Return Me.tableTPINSData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DBxDataSet = CType(MyBase.Clone,DBxDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("TPINSData")) Is Nothing) Then
                MyBase.Tables.Add(New TPINSDataDataTable(ds.Tables("TPINSData")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTPINSData = CType(MyBase.Tables("TPINSData"),TPINSDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTPINSData) Is Nothing) Then
                Me.tableTPINSData.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "DBxDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DBxDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTPINSData = New TPINSDataDataTable()
        MyBase.Tables.Add(Me.tableTPINSData)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeTPINSData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DBxDataSet = New DBxDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub TPINSDataRowChangeEventHandler(ByVal sender As Object, ByVal e As TPINSDataRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TPINSDataDataTable
        Inherits Global.System.Data.TypedTableBase(Of TPINSDataRow)
        
        Private columnLotNo As Global.System.Data.DataColumn
        
        Private columnStartTime As Global.System.Data.DataColumn
        
        Private columnEndTime As Global.System.Data.DataColumn
        
        Private columnReqDate As Global.System.Data.DataColumn
        
        Private columnReqMode1 As Global.System.Data.DataColumn
        
        Private columnReqMode2 As Global.System.Data.DataColumn
        
        Private columnReqMode3 As Global.System.Data.DataColumn
        
        Private columnReqMode4 As Global.System.Data.DataColumn
        
        Private columnMCNo As Global.System.Data.DataColumn
        
        Private columnOPNo As Global.System.Data.DataColumn
        
        Private columnInspQty As Global.System.Data.DataColumn
        
        Private columnGoodQty As Global.System.Data.DataColumn
        
        Private columnNGQty As Global.System.Data.DataColumn
        
        Private columnNGMode1 As Global.System.Data.DataColumn
        
        Private columnNGMode2 As Global.System.Data.DataColumn
        
        Private columnNGMode3 As Global.System.Data.DataColumn
        
        Private columnNGMode4 As Global.System.Data.DataColumn
        
        Private columnNGMode5 As Global.System.Data.DataColumn
        
        Private columnInspectorNo As Global.System.Data.DataColumn
        
        Private columnUrgentLot As Global.System.Data.DataColumn
        
        Private columnLotJudg As Global.System.Data.DataColumn
        
        Private columnFinalYield As Global.System.Data.DataColumn
        
        Private columnGLCheck As Global.System.Data.DataColumn
        
        Private columnComName As Global.System.Data.DataColumn
        
        Private columnRemark As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TPINSData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LotNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StartTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property EndTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ReqDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReqDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ReqMode1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnReqMode1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ReqMode2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnReqMode2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ReqMode3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnReqMode3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ReqMode4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnReqMode4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MCNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMCNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property OPNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InspQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInspQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property GoodQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoodQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NGQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNGQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NGMode1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNGMode1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NGMode2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNGMode2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NGMode3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNGMode3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NGMode4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNGMode4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NGMode5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNGMode5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InspectorNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInspectorNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UrgentLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUrgentLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LotJudgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotJudg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FinalYieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalYield
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property GLCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ComNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TPINSDataRow
            Get
                Return CType(Me.Rows(index),TPINSDataRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TPINSDataRowChanging As TPINSDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TPINSDataRowChanged As TPINSDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TPINSDataRowDeleting As TPINSDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event TPINSDataRowDeleted As TPINSDataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddTPINSDataRow(ByVal row As TPINSDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddTPINSDataRow( _
                    ByVal LotNo As String,  _
                    ByVal StartTime As Date,  _
                    ByVal EndTime As Date,  _
                    ByVal ReqDate As Date,  _
                    ByVal ReqMode1 As String,  _
                    ByVal ReqMode2 As String,  _
                    ByVal ReqMode3 As String,  _
                    ByVal ReqMode4 As String,  _
                    ByVal MCNo As String,  _
                    ByVal OPNo As String,  _
                    ByVal InspQty As Integer,  _
                    ByVal GoodQty As Integer,  _
                    ByVal NGQty As Integer,  _
                    ByVal NGMode1 As String,  _
                    ByVal NGMode2 As String,  _
                    ByVal NGMode3 As String,  _
                    ByVal NGMode4 As String,  _
                    ByVal NGMode5 As String,  _
                    ByVal InspectorNo As String,  _
                    ByVal UrgentLot As Boolean,  _
                    ByVal LotJudg As String,  _
                    ByVal FinalYield As Single,  _
                    ByVal GLCheck As String,  _
                    ByVal ComName As String,  _
                    ByVal Remark As String) As TPINSDataRow
            Dim rowTPINSDataRow As TPINSDataRow = CType(Me.NewRow,TPINSDataRow)
            Dim columnValuesArray() As Object = New Object() {LotNo, StartTime, EndTime, ReqDate, ReqMode1, ReqMode2, ReqMode3, ReqMode4, MCNo, OPNo, InspQty, GoodQty, NGQty, NGMode1, NGMode2, NGMode3, NGMode4, NGMode5, InspectorNo, UrgentLot, LotJudg, FinalYield, GLCheck, ComName, Remark}
            rowTPINSDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTPINSDataRow)
            Return rowTPINSDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByLotNoStartTime(ByVal LotNo As String, ByVal StartTime As Date) As TPINSDataRow
            Return CType(Me.Rows.Find(New Object() {LotNo, StartTime}),TPINSDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TPINSDataDataTable = CType(MyBase.Clone,TPINSDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TPINSDataDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnLotNo = MyBase.Columns("LotNo")
            Me.columnStartTime = MyBase.Columns("StartTime")
            Me.columnEndTime = MyBase.Columns("EndTime")
            Me.columnReqDate = MyBase.Columns("ReqDate")
            Me.columnReqMode1 = MyBase.Columns("ReqMode1")
            Me.columnReqMode2 = MyBase.Columns("ReqMode2")
            Me.columnReqMode3 = MyBase.Columns("ReqMode3")
            Me.columnReqMode4 = MyBase.Columns("ReqMode4")
            Me.columnMCNo = MyBase.Columns("MCNo")
            Me.columnOPNo = MyBase.Columns("OPNo")
            Me.columnInspQty = MyBase.Columns("InspQty")
            Me.columnGoodQty = MyBase.Columns("GoodQty")
            Me.columnNGQty = MyBase.Columns("NGQty")
            Me.columnNGMode1 = MyBase.Columns("NGMode1")
            Me.columnNGMode2 = MyBase.Columns("NGMode2")
            Me.columnNGMode3 = MyBase.Columns("NGMode3")
            Me.columnNGMode4 = MyBase.Columns("NGMode4")
            Me.columnNGMode5 = MyBase.Columns("NGMode5")
            Me.columnInspectorNo = MyBase.Columns("InspectorNo")
            Me.columnUrgentLot = MyBase.Columns("UrgentLot")
            Me.columnLotJudg = MyBase.Columns("LotJudg")
            Me.columnFinalYield = MyBase.Columns("FinalYield")
            Me.columnGLCheck = MyBase.Columns("GLCheck")
            Me.columnComName = MyBase.Columns("ComName")
            Me.columnRemark = MyBase.Columns("Remark")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnLotNo = New Global.System.Data.DataColumn("LotNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotNo)
            Me.columnStartTime = New Global.System.Data.DataColumn("StartTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartTime)
            Me.columnEndTime = New Global.System.Data.DataColumn("EndTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndTime)
            Me.columnReqDate = New Global.System.Data.DataColumn("ReqDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReqDate)
            Me.columnReqMode1 = New Global.System.Data.DataColumn("ReqMode1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReqMode1)
            Me.columnReqMode2 = New Global.System.Data.DataColumn("ReqMode2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReqMode2)
            Me.columnReqMode3 = New Global.System.Data.DataColumn("ReqMode3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReqMode3)
            Me.columnReqMode4 = New Global.System.Data.DataColumn("ReqMode4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReqMode4)
            Me.columnMCNo = New Global.System.Data.DataColumn("MCNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMCNo)
            Me.columnOPNo = New Global.System.Data.DataColumn("OPNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPNo)
            Me.columnInspQty = New Global.System.Data.DataColumn("InspQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInspQty)
            Me.columnGoodQty = New Global.System.Data.DataColumn("GoodQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoodQty)
            Me.columnNGQty = New Global.System.Data.DataColumn("NGQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNGQty)
            Me.columnNGMode1 = New Global.System.Data.DataColumn("NGMode1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNGMode1)
            Me.columnNGMode2 = New Global.System.Data.DataColumn("NGMode2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNGMode2)
            Me.columnNGMode3 = New Global.System.Data.DataColumn("NGMode3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNGMode3)
            Me.columnNGMode4 = New Global.System.Data.DataColumn("NGMode4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNGMode4)
            Me.columnNGMode5 = New Global.System.Data.DataColumn("NGMode5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNGMode5)
            Me.columnInspectorNo = New Global.System.Data.DataColumn("InspectorNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInspectorNo)
            Me.columnUrgentLot = New Global.System.Data.DataColumn("UrgentLot", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUrgentLot)
            Me.columnLotJudg = New Global.System.Data.DataColumn("LotJudg", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotJudg)
            Me.columnFinalYield = New Global.System.Data.DataColumn("FinalYield", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalYield)
            Me.columnGLCheck = New Global.System.Data.DataColumn("GLCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLCheck)
            Me.columnComName = New Global.System.Data.DataColumn("ComName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComName)
            Me.columnRemark = New Global.System.Data.DataColumn("Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemark)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLotNo, Me.columnStartTime}, true))
            Me.columnLotNo.AllowDBNull = false
            Me.columnLotNo.MaxLength = 10
            Me.columnStartTime.AllowDBNull = false
            Me.columnReqMode1.MaxLength = 20
            Me.columnReqMode2.MaxLength = 20
            Me.columnReqMode3.MaxLength = 20
            Me.columnReqMode4.MaxLength = 20
            Me.columnMCNo.MaxLength = 10
            Me.columnOPNo.MaxLength = 10
            Me.columnNGMode1.MaxLength = 20
            Me.columnNGMode2.MaxLength = 20
            Me.columnNGMode3.MaxLength = 20
            Me.columnNGMode4.MaxLength = 20
            Me.columnNGMode5.MaxLength = 20
            Me.columnInspectorNo.MaxLength = 10
            Me.columnLotJudg.MaxLength = 2
            Me.columnGLCheck.MaxLength = 10
            Me.columnComName.MaxLength = 10
            Me.columnRemark.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewTPINSDataRow() As TPINSDataRow
            Return CType(Me.NewRow,TPINSDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TPINSDataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TPINSDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TPINSDataRowChangedEvent) Is Nothing) Then
                RaiseEvent TPINSDataRowChanged(Me, New TPINSDataRowChangeEvent(CType(e.Row,TPINSDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TPINSDataRowChangingEvent) Is Nothing) Then
                RaiseEvent TPINSDataRowChanging(Me, New TPINSDataRowChangeEvent(CType(e.Row,TPINSDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TPINSDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent TPINSDataRowDeleted(Me, New TPINSDataRowChangeEvent(CType(e.Row,TPINSDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TPINSDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent TPINSDataRowDeleting(Me, New TPINSDataRowChangeEvent(CType(e.Row,TPINSDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveTPINSDataRow(ByVal row As TPINSDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DBxDataSet = New DBxDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TPINSDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TPINSDataRow
        Inherits Global.System.Data.DataRow
        
        Private tableTPINSData As TPINSDataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTPINSData = CType(Me.Table,TPINSDataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property LotNo() As String
            Get
                Return CType(Me(Me.tableTPINSData.LotNoColumn),String)
            End Get
            Set
                Me(Me.tableTPINSData.LotNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StartTime() As Date
            Get
                Return CType(Me(Me.tableTPINSData.StartTimeColumn),Date)
            End Get
            Set
                Me(Me.tableTPINSData.StartTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property EndTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.EndTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EndTime' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.EndTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ReqDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.ReqDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReqDate' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.ReqDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ReqMode1() As String
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.ReqMode1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReqMode1' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.ReqMode1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ReqMode2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.ReqMode2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReqMode2' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.ReqMode2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ReqMode3() As String
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.ReqMode3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReqMode3' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.ReqMode3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ReqMode4() As String
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.ReqMode4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReqMode4' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.ReqMode4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MCNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.MCNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MCNo' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.MCNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property OPNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.OPNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPNo' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.OPNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InspQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.InspQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InspQty' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.InspQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property GoodQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.GoodQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoodQty' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.GoodQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NGQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.NGQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NGQty' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.NGQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NGMode1() As String
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.NGMode1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NGMode1' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.NGMode1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NGMode2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.NGMode2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NGMode2' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.NGMode2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NGMode3() As String
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.NGMode3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NGMode3' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.NGMode3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NGMode4() As String
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.NGMode4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NGMode4' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.NGMode4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NGMode5() As String
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.NGMode5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NGMode5' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.NGMode5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InspectorNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.InspectorNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InspectorNo' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.InspectorNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UrgentLot() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.UrgentLotColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UrgentLot' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.UrgentLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property LotJudg() As String
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.LotJudgColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LotJudg' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.LotJudgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FinalYield() As Single
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.FinalYieldColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalYield' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.FinalYieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property GLCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.GLCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GLCheck' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.GLCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ComName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.ComNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ComName' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.ComNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableTPINSData.RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remark' in table 'TPINSData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTPINSData.RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsEndTimeNull() As Boolean
            Return Me.IsNull(Me.tableTPINSData.EndTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetEndTimeNull()
            Me(Me.tableTPINSData.EndTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsReqDateNull() As Boolean
            Return Me.IsNull(Me.tableTPINSData.ReqDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetReqDateNull()
            Me(Me.tableTPINSData.ReqDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsReqMode1Null() As Boolean
            Return Me.IsNull(Me.tableTPINSData.ReqMode1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetReqMode1Null()
            Me(Me.tableTPINSData.ReqMode1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsReqMode2Null() As Boolean
            Return Me.IsNull(Me.tableTPINSData.ReqMode2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetReqMode2Null()
            Me(Me.tableTPINSData.ReqMode2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsReqMode3Null() As Boolean
            Return Me.IsNull(Me.tableTPINSData.ReqMode3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetReqMode3Null()
            Me(Me.tableTPINSData.ReqMode3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsReqMode4Null() As Boolean
            Return Me.IsNull(Me.tableTPINSData.ReqMode4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetReqMode4Null()
            Me(Me.tableTPINSData.ReqMode4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMCNoNull() As Boolean
            Return Me.IsNull(Me.tableTPINSData.MCNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMCNoNull()
            Me(Me.tableTPINSData.MCNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOPNoNull() As Boolean
            Return Me.IsNull(Me.tableTPINSData.OPNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOPNoNull()
            Me(Me.tableTPINSData.OPNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInspQtyNull() As Boolean
            Return Me.IsNull(Me.tableTPINSData.InspQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInspQtyNull()
            Me(Me.tableTPINSData.InspQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsGoodQtyNull() As Boolean
            Return Me.IsNull(Me.tableTPINSData.GoodQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetGoodQtyNull()
            Me(Me.tableTPINSData.GoodQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNGQtyNull() As Boolean
            Return Me.IsNull(Me.tableTPINSData.NGQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNGQtyNull()
            Me(Me.tableTPINSData.NGQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNGMode1Null() As Boolean
            Return Me.IsNull(Me.tableTPINSData.NGMode1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNGMode1Null()
            Me(Me.tableTPINSData.NGMode1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNGMode2Null() As Boolean
            Return Me.IsNull(Me.tableTPINSData.NGMode2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNGMode2Null()
            Me(Me.tableTPINSData.NGMode2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNGMode3Null() As Boolean
            Return Me.IsNull(Me.tableTPINSData.NGMode3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNGMode3Null()
            Me(Me.tableTPINSData.NGMode3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNGMode4Null() As Boolean
            Return Me.IsNull(Me.tableTPINSData.NGMode4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNGMode4Null()
            Me(Me.tableTPINSData.NGMode4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNGMode5Null() As Boolean
            Return Me.IsNull(Me.tableTPINSData.NGMode5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNGMode5Null()
            Me(Me.tableTPINSData.NGMode5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInspectorNoNull() As Boolean
            Return Me.IsNull(Me.tableTPINSData.InspectorNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInspectorNoNull()
            Me(Me.tableTPINSData.InspectorNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUrgentLotNull() As Boolean
            Return Me.IsNull(Me.tableTPINSData.UrgentLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUrgentLotNull()
            Me(Me.tableTPINSData.UrgentLotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsLotJudgNull() As Boolean
            Return Me.IsNull(Me.tableTPINSData.LotJudgColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetLotJudgNull()
            Me(Me.tableTPINSData.LotJudgColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinalYieldNull() As Boolean
            Return Me.IsNull(Me.tableTPINSData.FinalYieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinalYieldNull()
            Me(Me.tableTPINSData.FinalYieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsGLCheckNull() As Boolean
            Return Me.IsNull(Me.tableTPINSData.GLCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetGLCheckNull()
            Me(Me.tableTPINSData.GLCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsComNameNull() As Boolean
            Return Me.IsNull(Me.tableTPINSData.ComNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetComNameNull()
            Me(Me.tableTPINSData.ComNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tableTPINSData.RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetRemarkNull()
            Me(Me.tableTPINSData.RemarkColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class TPINSDataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TPINSDataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As TPINSDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As TPINSDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DBxDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TPINSDataTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TPINSData"
            tableMapping.ColumnMappings.Add("LotNo", "LotNo")
            tableMapping.ColumnMappings.Add("StartTime", "StartTime")
            tableMapping.ColumnMappings.Add("EndTime", "EndTime")
            tableMapping.ColumnMappings.Add("ReqDate", "ReqDate")
            tableMapping.ColumnMappings.Add("ReqMode1", "ReqMode1")
            tableMapping.ColumnMappings.Add("ReqMode2", "ReqMode2")
            tableMapping.ColumnMappings.Add("ReqMode3", "ReqMode3")
            tableMapping.ColumnMappings.Add("ReqMode4", "ReqMode4")
            tableMapping.ColumnMappings.Add("MCNo", "MCNo")
            tableMapping.ColumnMappings.Add("OPNo", "OPNo")
            tableMapping.ColumnMappings.Add("InspQty", "InspQty")
            tableMapping.ColumnMappings.Add("GoodQty", "GoodQty")
            tableMapping.ColumnMappings.Add("NGQty", "NGQty")
            tableMapping.ColumnMappings.Add("NGMode1", "NGMode1")
            tableMapping.ColumnMappings.Add("NGMode2", "NGMode2")
            tableMapping.ColumnMappings.Add("NGMode3", "NGMode3")
            tableMapping.ColumnMappings.Add("NGMode4", "NGMode4")
            tableMapping.ColumnMappings.Add("NGMode5", "NGMode5")
            tableMapping.ColumnMappings.Add("InspectorNo", "InspectorNo")
            tableMapping.ColumnMappings.Add("UrgentLot", "UrgentLot")
            tableMapping.ColumnMappings.Add("LotJudg", "LotJudg")
            tableMapping.ColumnMappings.Add("FinalYield", "FinalYield")
            tableMapping.ColumnMappings.Add("GLCheck", "GLCheck")
            tableMapping.ColumnMappings.Add("ComName", "ComName")
            tableMapping.ColumnMappings.Add("Remark", "Remark")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TPINSData] WHERE (([LotNo] = @Original_LotNo) AND ([StartTime]"& _ 
                " = @Original_StartTime) AND ((@IsNull_EndTime = 1 AND [EndTime] IS NULL) OR ([En"& _ 
                "dTime] = @Original_EndTime)) AND ((@IsNull_ReqDate = 1 AND [ReqDate] IS NULL) OR"& _ 
                " ([ReqDate] = @Original_ReqDate)) AND ((@IsNull_ReqMode1 = 1 AND [ReqMode1] IS N"& _ 
                "ULL) OR ([ReqMode1] = @Original_ReqMode1)) AND ((@IsNull_ReqMode2 = 1 AND [ReqMo"& _ 
                "de2] IS NULL) OR ([ReqMode2] = @Original_ReqMode2)) AND ((@IsNull_ReqMode3 = 1 A"& _ 
                "ND [ReqMode3] IS NULL) OR ([ReqMode3] = @Original_ReqMode3)) AND ((@IsNull_ReqMo"& _ 
                "de4 = 1 AND [ReqMode4] IS NULL) OR ([ReqMode4] = @Original_ReqMode4)) AND ((@IsN"& _ 
                "ull_MCNo = 1 AND [MCNo] IS NULL) OR ([MCNo] = @Original_MCNo)) AND ((@IsNull_OPN"& _ 
                "o = 1 AND [OPNo] IS NULL) OR ([OPNo] = @Original_OPNo)) AND ((@IsNull_InspQty = "& _ 
                "1 AND [InspQty] IS NULL) OR ([InspQty] = @Original_InspQty)) AND ((@IsNull_GoodQ"& _ 
                "ty = 1 AND [GoodQty] IS NULL) OR ([GoodQty] = @Original_GoodQty)) AND ((@IsNull_"& _ 
                "NGQty = 1 AND [NGQty] IS NULL) OR ([NGQty] = @Original_NGQty)) AND ((@IsNull_NGM"& _ 
                "ode1 = 1 AND [NGMode1] IS NULL) OR ([NGMode1] = @Original_NGMode1)) AND ((@IsNul"& _ 
                "l_NGMode2 = 1 AND [NGMode2] IS NULL) OR ([NGMode2] = @Original_NGMode2)) AND ((@"& _ 
                "IsNull_NGMode3 = 1 AND [NGMode3] IS NULL) OR ([NGMode3] = @Original_NGMode3)) AN"& _ 
                "D ((@IsNull_NGMode4 = 1 AND [NGMode4] IS NULL) OR ([NGMode4] = @Original_NGMode4"& _ 
                ")) AND ((@IsNull_NGMode5 = 1 AND [NGMode5] IS NULL) OR ([NGMode5] = @Original_NG"& _ 
                "Mode5)) AND ((@IsNull_InspectorNo = 1 AND [InspectorNo] IS NULL) OR ([InspectorN"& _ 
                "o] = @Original_InspectorNo)) AND ((@IsNull_UrgentLot = 1 AND [UrgentLot] IS NULL"& _ 
                ") OR ([UrgentLot] = @Original_UrgentLot)) AND ((@IsNull_LotJudg = 1 AND [LotJudg"& _ 
                "] IS NULL) OR ([LotJudg] = @Original_LotJudg)) AND ((@IsNull_FinalYield = 1 AND "& _ 
                "[FinalYield] IS NULL) OR ([FinalYield] = @Original_FinalYield)) AND ((@IsNull_GL"& _ 
                "Check = 1 AND [GLCheck] IS NULL) OR ([GLCheck] = @Original_GLCheck)) AND ((@IsNu"& _ 
                "ll_ComName = 1 AND [ComName] IS NULL) OR ([ComName] = @Original_ComName)) AND (("& _ 
                "@IsNull_Remark = 1 AND [Remark] IS NULL) OR ([Remark] = @Original_Remark)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EndTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EndTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReqDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReqDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReqMode1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReqMode1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReqMode2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReqMode2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReqMode3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReqMode3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReqMode4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReqMode4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MCNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InspQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InspQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GoodQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GoodQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GoodQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GoodQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NGMode1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NGMode1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NGMode2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NGMode2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NGMode3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NGMode3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NGMode4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NGMode4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NGMode5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NGMode5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InspectorNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectorNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InspectorNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectorNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UrgentLot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UrgentLot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UrgentLot", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UrgentLot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotJudg", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudg", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotJudg", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudg", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FinalYield", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinalYield", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FinalYield", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinalYield", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GLCheck", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GLCheck", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ComName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ComName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ComName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ComName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remark", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remark", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TPINSData] ([LotNo], [StartTime], [EndTime], [ReqDate], [ReqMo"& _ 
                "de1], [ReqMode2], [ReqMode3], [ReqMode4], [MCNo], [OPNo], [InspQty], [GoodQty], "& _ 
                "[NGQty], [NGMode1], [NGMode2], [NGMode3], [NGMode4], [NGMode5], [InspectorNo], ["& _ 
                "UrgentLot], [LotJudg], [FinalYield], [GLCheck], [ComName], [Remark]) VALUES (@Lo"& _ 
                "tNo, @StartTime, @EndTime, @ReqDate, @ReqMode1, @ReqMode2, @ReqMode3, @ReqMode4,"& _ 
                " @MCNo, @OPNo, @InspQty, @GoodQty, @NGQty, @NGMode1, @NGMode2, @NGMode3, @NGMode"& _ 
                "4, @NGMode5, @InspectorNo, @UrgentLot, @LotJudg, @FinalYield, @GLCheck, @ComName"& _ 
                ", @Remark);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LotNo, StartTime, EndTime, ReqDate, ReqMode1, ReqMode2, ReqM"& _ 
                "ode3, ReqMode4, MCNo, OPNo, InspQty, GoodQty, NGQty, NGMode1, NGMode2, NGMode3, "& _ 
                "NGMode4, NGMode5, InspectorNo, UrgentLot, LotJudg, FinalYield, GLCheck, ComName,"& _ 
                " Remark FROM TPINSData WHERE (LotNo = @LotNo) AND (StartTime = @StartTime)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReqDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReqMode1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReqMode2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReqMode3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReqMode4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InspQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GoodQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GoodQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NGMode1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NGMode2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NGMode3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NGMode4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NGMode5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InspectorNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectorNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UrgentLot", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UrgentLot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotJudg", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudg", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinalYield", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinalYield", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GLCheck", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ComName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ComName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remark", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TPINSData] SET [LotNo] = @LotNo, [StartTime] = @StartTime, [EndTime"& _ 
                "] = @EndTime, [ReqDate] = @ReqDate, [ReqMode1] = @ReqMode1, [ReqMode2] = @ReqMod"& _ 
                "e2, [ReqMode3] = @ReqMode3, [ReqMode4] = @ReqMode4, [MCNo] = @MCNo, [OPNo] = @OP"& _ 
                "No, [InspQty] = @InspQty, [GoodQty] = @GoodQty, [NGQty] = @NGQty, [NGMode1] = @N"& _ 
                "GMode1, [NGMode2] = @NGMode2, [NGMode3] = @NGMode3, [NGMode4] = @NGMode4, [NGMod"& _ 
                "e5] = @NGMode5, [InspectorNo] = @InspectorNo, [UrgentLot] = @UrgentLot, [LotJudg"& _ 
                "] = @LotJudg, [FinalYield] = @FinalYield, [GLCheck] = @GLCheck, [ComName] = @Com"& _ 
                "Name, [Remark] = @Remark WHERE (([LotNo] = @Original_LotNo) AND ([StartTime] = @"& _ 
                "Original_StartTime) AND ((@IsNull_EndTime = 1 AND [EndTime] IS NULL) OR ([EndTim"& _ 
                "e] = @Original_EndTime)) AND ((@IsNull_ReqDate = 1 AND [ReqDate] IS NULL) OR ([R"& _ 
                "eqDate] = @Original_ReqDate)) AND ((@IsNull_ReqMode1 = 1 AND [ReqMode1] IS NULL)"& _ 
                " OR ([ReqMode1] = @Original_ReqMode1)) AND ((@IsNull_ReqMode2 = 1 AND [ReqMode2]"& _ 
                " IS NULL) OR ([ReqMode2] = @Original_ReqMode2)) AND ((@IsNull_ReqMode3 = 1 AND ["& _ 
                "ReqMode3] IS NULL) OR ([ReqMode3] = @Original_ReqMode3)) AND ((@IsNull_ReqMode4 "& _ 
                "= 1 AND [ReqMode4] IS NULL) OR ([ReqMode4] = @Original_ReqMode4)) AND ((@IsNull_"& _ 
                "MCNo = 1 AND [MCNo] IS NULL) OR ([MCNo] = @Original_MCNo)) AND ((@IsNull_OPNo = "& _ 
                "1 AND [OPNo] IS NULL) OR ([OPNo] = @Original_OPNo)) AND ((@IsNull_InspQty = 1 AN"& _ 
                "D [InspQty] IS NULL) OR ([InspQty] = @Original_InspQty)) AND ((@IsNull_GoodQty ="& _ 
                " 1 AND [GoodQty] IS NULL) OR ([GoodQty] = @Original_GoodQty)) AND ((@IsNull_NGQt"& _ 
                "y = 1 AND [NGQty] IS NULL) OR ([NGQty] = @Original_NGQty)) AND ((@IsNull_NGMode1"& _ 
                " = 1 AND [NGMode1] IS NULL) OR ([NGMode1] = @Original_NGMode1)) AND ((@IsNull_NG"& _ 
                "Mode2 = 1 AND [NGMode2] IS NULL) OR ([NGMode2] = @Original_NGMode2)) AND ((@IsNu"& _ 
                "ll_NGMode3 = 1 AND [NGMode3] IS NULL) OR ([NGMode3] = @Original_NGMode3)) AND (("& _ 
                "@IsNull_NGMode4 = 1 AND [NGMode4] IS NULL) OR ([NGMode4] = @Original_NGMode4)) A"& _ 
                "ND ((@IsNull_NGMode5 = 1 AND [NGMode5] IS NULL) OR ([NGMode5] = @Original_NGMode"& _ 
                "5)) AND ((@IsNull_InspectorNo = 1 AND [InspectorNo] IS NULL) OR ([InspectorNo] ="& _ 
                " @Original_InspectorNo)) AND ((@IsNull_UrgentLot = 1 AND [UrgentLot] IS NULL) OR"& _ 
                " ([UrgentLot] = @Original_UrgentLot)) AND ((@IsNull_LotJudg = 1 AND [LotJudg] IS"& _ 
                " NULL) OR ([LotJudg] = @Original_LotJudg)) AND ((@IsNull_FinalYield = 1 AND [Fin"& _ 
                "alYield] IS NULL) OR ([FinalYield] = @Original_FinalYield)) AND ((@IsNull_GLChec"& _ 
                "k = 1 AND [GLCheck] IS NULL) OR ([GLCheck] = @Original_GLCheck)) AND ((@IsNull_C"& _ 
                "omName = 1 AND [ComName] IS NULL) OR ([ComName] = @Original_ComName)) AND ((@IsN"& _ 
                "ull_Remark = 1 AND [Remark] IS NULL) OR ([Remark] = @Original_Remark)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " LotNo, StartTime, EndTime, ReqDate, ReqMode1, ReqMode2, ReqMode3, ReqMode4, MCN"& _ 
                "o, OPNo, InspQty, GoodQty, NGQty, NGMode1, NGMode2, NGMode3, NGMode4, NGMode5, I"& _ 
                "nspectorNo, UrgentLot, LotJudg, FinalYield, GLCheck, ComName, Remark FROM TPINSD"& _ 
                "ata WHERE (LotNo = @LotNo) AND (StartTime = @StartTime)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReqDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReqMode1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReqMode2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReqMode3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReqMode4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InspQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GoodQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GoodQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NGMode1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NGMode2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NGMode3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NGMode4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NGMode5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InspectorNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectorNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UrgentLot", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UrgentLot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotJudg", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudg", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinalYield", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinalYield", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GLCheck", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ComName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ComName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remark", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EndTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EndTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReqDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReqDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReqMode1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReqMode1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReqMode2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReqMode2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReqMode3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReqMode3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ReqMode4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ReqMode4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReqMode4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MCNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InspQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InspQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GoodQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GoodQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GoodQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GoodQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NGMode1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NGMode1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NGMode2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NGMode2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NGMode3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NGMode3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NGMode4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NGMode4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NGMode5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NGMode5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGMode5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InspectorNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectorNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InspectorNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectorNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UrgentLot", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UrgentLot", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UrgentLot", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UrgentLot", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotJudg", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudg", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotJudg", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudg", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FinalYield", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinalYield", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FinalYield", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinalYield", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GLCheck", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GLCheck", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ComName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ComName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ComName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ComName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remark", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remark", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT LotNo, StartTime, EndTime, ReqDate, ReqMode1, ReqMode2, ReqMode3, ReqMode4"& _ 
                ", MCNo, OPNo, InspQty, GoodQty, NGQty, NGMode1, NGMode2, NGMode3, NGMode4, NGMod"& _ 
                "e5, InspectorNo, UrgentLot, LotJudg, FinalYield, GLCheck, ComName, Remark FROM d"& _ 
                "bo.TPINSData"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT                  LotNo, StartTime, EndTime, ReqDate, ReqMode1, ReqMode2, R"& _ 
                "eqMode3, ReqMode4, MCNo, OPNo, InspQty, GoodQty, NGQty, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "            NGMode1, NGMode2, NGMode3, NGMode4, NGMode5, InspectorNo, UrgentLot,"& _ 
                " LotJudg, FinalYield, GLCheck, ComName, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                                  Rema"& _ 
                "rk"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM                     TPINSData"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE                   (LotNo = @Param1"& _ 
                ")"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.TPINSDataDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DBxDataSet.TPINSDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DBxDataSet.TPINSDataDataTable = New DBxDataSet.TPINSDataDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DBxDataSet.TPINSDataDataTable, ByVal Param1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.TPINSDataDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TPINSData")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_LotNo As String,  _
                    ByVal Original_StartTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_EndTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_ReqDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_ReqMode1 As String,  _
                    ByVal Original_ReqMode2 As String,  _
                    ByVal Original_ReqMode3 As String,  _
                    ByVal Original_ReqMode4 As String,  _
                    ByVal Original_MCNo As String,  _
                    ByVal Original_OPNo As String,  _
                    ByVal Original_InspQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_GoodQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NGQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NGMode1 As String,  _
                    ByVal Original_NGMode2 As String,  _
                    ByVal Original_NGMode3 As String,  _
                    ByVal Original_NGMode4 As String,  _
                    ByVal Original_NGMode5 As String,  _
                    ByVal Original_InspectorNo As String,  _
                    ByVal Original_UrgentLot As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_LotJudg As String,  _
                    ByVal Original_FinalYield As Global.System.Nullable(Of Single),  _
                    ByVal Original_GLCheck As String,  _
                    ByVal Original_ComName As String,  _
                    ByVal Original_Remark As String) As Integer
            If (Original_LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LotNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_LotNo,String)
            End If
            If (Original_StartTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_StartTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Original_EndTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_EndTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_ReqDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ReqDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_ReqMode1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ReqMode1,String)
            End If
            If (Original_ReqMode2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ReqMode2,String)
            End If
            If (Original_ReqMode3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_ReqMode3,String)
            End If
            If (Original_ReqMode4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_ReqMode4,String)
            End If
            If (Original_MCNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_MCNo,String)
            End If
            If (Original_OPNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_OPNo,String)
            End If
            If (Original_InspQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_InspQty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_GoodQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_GoodQty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_NGQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_NGQty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_NGMode1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_NGMode1,String)
            End If
            If (Original_NGMode2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_NGMode2,String)
            End If
            If (Original_NGMode3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_NGMode3,String)
            End If
            If (Original_NGMode4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_NGMode4,String)
            End If
            If (Original_NGMode5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_NGMode5,String)
            End If
            If (Original_InspectorNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_InspectorNo,String)
            End If
            If (Original_UrgentLot.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_UrgentLot.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_LotJudg Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_LotJudg,String)
            End If
            If (Original_FinalYield.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_FinalYield.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_GLCheck Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(Original_GLCheck,String)
            End If
            If (Original_ComName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_ComName,String)
            End If
            If (Original_Remark Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(Original_Remark,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal LotNo As String,  _
                    ByVal StartTime As Global.System.Nullable(Of Date),  _
                    ByVal EndTime As Global.System.Nullable(Of Date),  _
                    ByVal ReqDate As Global.System.Nullable(Of Date),  _
                    ByVal ReqMode1 As String,  _
                    ByVal ReqMode2 As String,  _
                    ByVal ReqMode3 As String,  _
                    ByVal ReqMode4 As String,  _
                    ByVal MCNo As String,  _
                    ByVal OPNo As String,  _
                    ByVal InspQty As Global.System.Nullable(Of Integer),  _
                    ByVal GoodQty As Global.System.Nullable(Of Integer),  _
                    ByVal NGQty As Global.System.Nullable(Of Integer),  _
                    ByVal NGMode1 As String,  _
                    ByVal NGMode2 As String,  _
                    ByVal NGMode3 As String,  _
                    ByVal NGMode4 As String,  _
                    ByVal NGMode5 As String,  _
                    ByVal InspectorNo As String,  _
                    ByVal UrgentLot As Global.System.Nullable(Of Boolean),  _
                    ByVal LotJudg As String,  _
                    ByVal FinalYield As Global.System.Nullable(Of Single),  _
                    ByVal GLCheck As String,  _
                    ByVal ComName As String,  _
                    ByVal Remark As String) As Integer
            If (LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotNo")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(LotNo,String)
            End If
            If (StartTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(StartTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (EndTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(EndTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ReqDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ReqDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ReqMode1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ReqMode1,String)
            End If
            If (ReqMode2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ReqMode2,String)
            End If
            If (ReqMode3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ReqMode3,String)
            End If
            If (ReqMode4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ReqMode4,String)
            End If
            If (MCNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(MCNo,String)
            End If
            If (OPNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(OPNo,String)
            End If
            If (InspQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(InspQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (GoodQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(GoodQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (NGQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(NGQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (NGMode1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(NGMode1,String)
            End If
            If (NGMode2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(NGMode2,String)
            End If
            If (NGMode3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(NGMode3,String)
            End If
            If (NGMode4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(NGMode4,String)
            End If
            If (NGMode5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(NGMode5,String)
            End If
            If (InspectorNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(InspectorNo,String)
            End If
            If (UrgentLot.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(UrgentLot.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (LotJudg Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(LotJudg,String)
            End If
            If (FinalYield.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(FinalYield.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (GLCheck Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(GLCheck,String)
            End If
            If (ComName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(ComName,String)
            End If
            If (Remark Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Remark,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LotNo As String,  _
                    ByVal StartTime As Global.System.Nullable(Of Date),  _
                    ByVal EndTime As Global.System.Nullable(Of Date),  _
                    ByVal ReqDate As Global.System.Nullable(Of Date),  _
                    ByVal ReqMode1 As String,  _
                    ByVal ReqMode2 As String,  _
                    ByVal ReqMode3 As String,  _
                    ByVal ReqMode4 As String,  _
                    ByVal MCNo As String,  _
                    ByVal OPNo As String,  _
                    ByVal InspQty As Global.System.Nullable(Of Integer),  _
                    ByVal GoodQty As Global.System.Nullable(Of Integer),  _
                    ByVal NGQty As Global.System.Nullable(Of Integer),  _
                    ByVal NGMode1 As String,  _
                    ByVal NGMode2 As String,  _
                    ByVal NGMode3 As String,  _
                    ByVal NGMode4 As String,  _
                    ByVal NGMode5 As String,  _
                    ByVal InspectorNo As String,  _
                    ByVal UrgentLot As Global.System.Nullable(Of Boolean),  _
                    ByVal LotJudg As String,  _
                    ByVal FinalYield As Global.System.Nullable(Of Single),  _
                    ByVal GLCheck As String,  _
                    ByVal ComName As String,  _
                    ByVal Remark As String,  _
                    ByVal Original_LotNo As String,  _
                    ByVal Original_StartTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_EndTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_ReqDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_ReqMode1 As String,  _
                    ByVal Original_ReqMode2 As String,  _
                    ByVal Original_ReqMode3 As String,  _
                    ByVal Original_ReqMode4 As String,  _
                    ByVal Original_MCNo As String,  _
                    ByVal Original_OPNo As String,  _
                    ByVal Original_InspQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_GoodQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NGQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NGMode1 As String,  _
                    ByVal Original_NGMode2 As String,  _
                    ByVal Original_NGMode3 As String,  _
                    ByVal Original_NGMode4 As String,  _
                    ByVal Original_NGMode5 As String,  _
                    ByVal Original_InspectorNo As String,  _
                    ByVal Original_UrgentLot As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_LotJudg As String,  _
                    ByVal Original_FinalYield As Global.System.Nullable(Of Single),  _
                    ByVal Original_GLCheck As String,  _
                    ByVal Original_ComName As String,  _
                    ByVal Original_Remark As String) As Integer
            If (LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LotNo,String)
            End If
            If (StartTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(StartTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (EndTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(EndTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ReqDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ReqDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ReqMode1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ReqMode1,String)
            End If
            If (ReqMode2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ReqMode2,String)
            End If
            If (ReqMode3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ReqMode3,String)
            End If
            If (ReqMode4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ReqMode4,String)
            End If
            If (MCNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(MCNo,String)
            End If
            If (OPNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(OPNo,String)
            End If
            If (InspQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(InspQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (GoodQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(GoodQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (NGQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(NGQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (NGMode1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(NGMode1,String)
            End If
            If (NGMode2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(NGMode2,String)
            End If
            If (NGMode3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(NGMode3,String)
            End If
            If (NGMode4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(NGMode4,String)
            End If
            If (NGMode5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(NGMode5,String)
            End If
            If (InspectorNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(InspectorNo,String)
            End If
            If (UrgentLot.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(UrgentLot.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (LotJudg Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(LotJudg,String)
            End If
            If (FinalYield.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(FinalYield.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (GLCheck Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(GLCheck,String)
            End If
            If (ComName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(ComName,String)
            End If
            If (Remark Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Remark,String)
            End If
            If (Original_LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LotNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_LotNo,String)
            End If
            If (Original_StartTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_StartTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_EndTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_EndTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_ReqDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_ReqDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_ReqMode1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_ReqMode1,String)
            End If
            If (Original_ReqMode2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_ReqMode2,String)
            End If
            If (Original_ReqMode3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_ReqMode3,String)
            End If
            If (Original_ReqMode4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_ReqMode4,String)
            End If
            If (Original_MCNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_MCNo,String)
            End If
            If (Original_OPNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_OPNo,String)
            End If
            If (Original_InspQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_InspQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_GoodQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_GoodQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_NGQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_NGQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_NGMode1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_NGMode1,String)
            End If
            If (Original_NGMode2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_NGMode2,String)
            End If
            If (Original_NGMode3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_NGMode3,String)
            End If
            If (Original_NGMode4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_NGMode4,String)
            End If
            If (Original_NGMode5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_NGMode5,String)
            End If
            If (Original_InspectorNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_InspectorNo,String)
            End If
            If (Original_UrgentLot.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_UrgentLot.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (Original_LotJudg Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_LotJudg,String)
            End If
            If (Original_FinalYield.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_FinalYield.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (Original_GLCheck Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_GLCheck,String)
            End If
            If (Original_ComName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_ComName,String)
            End If
            If (Original_Remark Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_Remark,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal EndTime As Global.System.Nullable(Of Date),  _
                    ByVal ReqDate As Global.System.Nullable(Of Date),  _
                    ByVal ReqMode1 As String,  _
                    ByVal ReqMode2 As String,  _
                    ByVal ReqMode3 As String,  _
                    ByVal ReqMode4 As String,  _
                    ByVal MCNo As String,  _
                    ByVal OPNo As String,  _
                    ByVal InspQty As Global.System.Nullable(Of Integer),  _
                    ByVal GoodQty As Global.System.Nullable(Of Integer),  _
                    ByVal NGQty As Global.System.Nullable(Of Integer),  _
                    ByVal NGMode1 As String,  _
                    ByVal NGMode2 As String,  _
                    ByVal NGMode3 As String,  _
                    ByVal NGMode4 As String,  _
                    ByVal NGMode5 As String,  _
                    ByVal InspectorNo As String,  _
                    ByVal UrgentLot As Global.System.Nullable(Of Boolean),  _
                    ByVal LotJudg As String,  _
                    ByVal FinalYield As Global.System.Nullable(Of Single),  _
                    ByVal GLCheck As String,  _
                    ByVal ComName As String,  _
                    ByVal Remark As String,  _
                    ByVal Original_LotNo As String,  _
                    ByVal Original_StartTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_EndTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_ReqDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_ReqMode1 As String,  _
                    ByVal Original_ReqMode2 As String,  _
                    ByVal Original_ReqMode3 As String,  _
                    ByVal Original_ReqMode4 As String,  _
                    ByVal Original_MCNo As String,  _
                    ByVal Original_OPNo As String,  _
                    ByVal Original_InspQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_GoodQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NGQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NGMode1 As String,  _
                    ByVal Original_NGMode2 As String,  _
                    ByVal Original_NGMode3 As String,  _
                    ByVal Original_NGMode4 As String,  _
                    ByVal Original_NGMode5 As String,  _
                    ByVal Original_InspectorNo As String,  _
                    ByVal Original_UrgentLot As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_LotJudg As String,  _
                    ByVal Original_FinalYield As Global.System.Nullable(Of Single),  _
                    ByVal Original_GLCheck As String,  _
                    ByVal Original_ComName As String,  _
                    ByVal Original_Remark As String) As Integer
            Return Me.Update(Original_LotNo, Original_StartTime, EndTime, ReqDate, ReqMode1, ReqMode2, ReqMode3, ReqMode4, MCNo, OPNo, InspQty, GoodQty, NGQty, NGMode1, NGMode2, NGMode3, NGMode4, NGMode5, InspectorNo, UrgentLot, LotJudg, FinalYield, GLCheck, ComName, Remark, Original_LotNo, Original_StartTime, Original_EndTime, Original_ReqDate, Original_ReqMode1, Original_ReqMode2, Original_ReqMode3, Original_ReqMode4, Original_MCNo, Original_OPNo, Original_InspQty, Original_GoodQty, Original_NGQty, Original_NGMode1, Original_NGMode2, Original_NGMode3, Original_NGMode4, Original_NGMode5, Original_InspectorNo, Original_UrgentLot, Original_LotJudg, Original_FinalYield, Original_GLCheck, Original_ComName, Original_Remark)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _tPINSDataTableAdapter As TPINSDataTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TPINSDataTableAdapter() As TPINSDataTableAdapter
            Get
                Return Me._tPINSDataTableAdapter
            End Get
            Set
                Me._tPINSDataTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._tPINSDataTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tPINSDataTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tPINSDataTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._tPINSDataTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DBxDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tPINSDataTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TPINSData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tPINSDataTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DBxDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tPINSDataTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TPINSData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tPINSDataTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DBxDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tPINSDataTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TPINSData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tPINSDataTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DBxDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._tPINSDataTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tPINSDataTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._tPINSDataTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tPINSDataTableAdapter, Me._tPINSDataTableAdapter.Connection)
                    Me._tPINSDataTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tPINSDataTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tPINSDataTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tPINSDataTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tPINSDataTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._tPINSDataTableAdapter) Is Nothing) Then
                    Me._tPINSDataTableAdapter.Connection = CType(revertConnections(Me._tPINSDataTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tPINSDataTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
